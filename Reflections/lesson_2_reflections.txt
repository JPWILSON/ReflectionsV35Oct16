What happens when you initialize a repository? Why do you need to do it?
	A hidden git file is created and all changes will now have the 
	opportunity to be tracked. One cannot commit changes if the repository
	has no been initialized - so this step is essential. 

How is the staging area different from the working directory and the repository? What value do you think it offers?
	It is a temprary storing point, allowing you to pic which files are going to be 

How can you use the staging area to make sure you have one commit per logical change?
	The staging area allows one to add only the files where the logical changes were done are added. 
	It also allows for review before commiting by comparing with both the working directory
	(git diff [no args]) and with the most recent commit (git diff --staged). The files in the 
	staging area can be moved (only if you are certain that you want to discard the changes)
	by entering git reset --hard. 

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
	When you would like to experiment, for eg adding a new feature, or making a version in a 
	different language, etc. This branch would not affect the main branch, and allows work to develop on the master (and other branches)

How do the diagrams help you visualize the branch structure?
	They make it simple to see what is going on, and at what point (stage of progress) you are leaving the branch you were on for this new bug fix/ feature. It also allows me to see exactly which commit is the parent, and how the git log will bw displayed. 

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
	The result is a single branch instead of 2 branches, with the commit history combined, and ordered by timestamp.
	In order to find the specific changes made in a commit as compared to its parent, the cmd: git show [commit id]
	The branch that was merged into the main one, should then be deleted (even though its commit history is preserved): git branch -d [deletedbranchName]
	Also, make sure the main branch that you want merged into is checked out before calling git merge master coins (could also just type git branch coins when master is checked out)
